(()=>{"use strict";var n={28:(n,t,e)=>{e.d(t,{Z:()=>l});var r=e(537),o=e.n(r),a=e(645),i=e.n(a)()(o());i.push([n.id,":root{\n    --color1: #7286D3;\n    --color2: #8EA7E9;\n    --color2rgba: rgba(183, 202, 251, 0.2);\n    --color3: #E5E0FF;\n    --color4: #FFF2F2;\n    --color5: #454545;\n    --color6: #FFB84C;\n    --color7: #F266AB;\n    --color8: #A459D1;\n    --color9: #3795BD;\n    --color10: #2F58CD;\n    --color11: #ffffff;;\n    --color12: #9e9ea7;\n    --color13: #2f2f2f;\n    --color14: #FFE162;\n    --color15: #FF6464;\n    --color16: #91C483;\n    --color17: #000000;\n    --font-color: #454545;\n    --font-family: :system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    --p-size: 14px;\n    --options-size: 12px;\n    --taskTitle: 20px;\n    --taskDescription: 14px;\n    --taskDueDate: 14px;\n    --taskPriority: 12px;\n}\n\nbody{\n    background-color: var(--colo47);\n}\n.middle-container{\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: 1fr;\n}\n\n#main-container{\n    /* width: 400px; */\n    grid-column: 2/3;\n    height: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    flex-direction: column;\n    gap: 10px;\n    grid-auto-flow: column;\n}\n\n.main-column{\n    gap: 5px;\n    padding: 5px;\n    display: flex;\n    flex-direction: column;\n}\n#personal-tasks{\n    \n}\n\n\n\n.task-container-header{\n    padding: 2.5px;\n    border: 1px solid var(--color10);\n    border-radius: 5px;\n    display: flex;\n    flex: 0 1 auto;\n    justify-content: left;\n    align-items: center;\n}\n\n.task-container{\n    /* padding: 10px; */\n    border: 1px solid var(--color10);\n    /* border-radius: 5px; */\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n\n.personal-tasks-header{\n    background-color: var(--color9);\n}\n\n.work-tasks-header{\n    background-color: var(--color2);\n}\n\n.home-tasks-header{\n    background-color: var(--color14);\n\n}\n\n.reminder-tasks-header{\n    background-color: var(--color15);\n\n}\n\n\n.header{\n    height: 80px;\n    background-color: #8EA7E9;\n}\n\n.left-sidebar{\n    grid-column: 1/2;\n    grid-row: 1/2;\n    height: 100%;\n    border: 1px solid #454545;\n}\n\n.right-sidebar{\n    grid-column: 3/4;\n    border: 1px solid #454545;\n}\n\n.middle-container{\n    grid-column: 2/3;\n    height: 100vh;\n    border: 1px solid #454545;\n\n}\n\n\n#formContainer{\n    height: 400px;\n    width: 300px;\n    background-color: var(--color11);\n    justify-self: center;\n    align-self: center;\n    visibility: hidden;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.4s;\n    border: 0.2px solid var(--color5);\n    border-radius: 15px;\n    padding: 20px;\n    box-shadow: 10px 10px 10px rgba(69,69,69,0.2);\n}\n\n#NewTaskHeading{\n    margin: 0px auto 0px auto;\n\n}\n\n#newTaskForm{\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    gap: 20px;\n}\n\n.taskInput{\n    height: 30px;\n    width: 100%\n}\n\n\n\n.innerContainer{\n    width: 100%;\n}\n#taskDetailsContainer{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n/* #form-container:target { */\n    /* display: block; */\n    /* -webkit-animation: fadeIn 1s;\n    animation: fadeIn 1s; */\n    /* visibility: visible;\n    opacity: 1;\n\n} */\n\n/*Add animation (fade in the popup) */\n@keyframes fadeIn {\n    from {opacity: 0;}\n    to {opacity: 1;}\n}\n\n.taskInput{\n    display: block;\n}\n\n.labels{\n    display: block;\n}\n\n.newTask{\n    display: flex;\n    flex: 0 1 1;\n    flex-direction: column;\n    justify-content: flex-start;\n    padding: 10px;\n    background-color: var(--color13);\n    border: 1px solid var(--color12);\n    border-radius: 5px;\n    color: var(--color11);\n    box-sizing: border-box;\n    margin: 2.5px 5px 2.5px 5px;\n}\n\n.project-button, .priority-button{\n    width: 70px;\n    height: 20px;\n    padding: 2px;\n    display: flex;\n    margin: auto;\n    align-items: center;\n    justify-content: center;\n    font-family: var(--font-family);\n    font-size: var(--options-size);\n    border: 1px solid;\n    border-radius: 5px;\n    color: var(--color13);\n}\n\n\n\n.Normal-button{\n    background-color: var(--color16);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.High-button{\n    background-color: var(--color15);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.Low-button{\n    background-color: var(--color14);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n\n\n/* .task-item{\n    display: block;\n} */\n\n/* \n.renderChild{\n    display: flex;\n    padding: 2px 10px 2px 10px;\n    margin: 0px;\n}\n*/\n#renderChild1{\n    display: flex;\n    vertical-align: top;\n    flex: 1;\n    margin: 0px;\n    gap: space-between;\n}\n\n#renderChild2{\n    margin-top: 10px;\n    margin-bottom: 0px;\n    display: flex;\n    flex: 1;\n}\n\n#renderChild3{\n    display: flex;\n    flex: 1 1 1;\n    margin-top: 0px;\n    align-items: bottom;\n    color: var(--color12);\n}\n\n\n#renderChild1Left{\n    display: flex;\n    gap: 5px;\n    align-items: top;\n    justify-content: flex-start;\n    vertical-align: top;\n} \n\n#renderChild1Right{\n    display: flex;\n    margin-left: auto;\n    align-items: top;\n}\n\n.taskDueDateContainer{\n    background-color: var(--color5);\n    height: 20px;\n    width: 50px;\n    padding: 0px 5px 0px 5px;\n    flex-direction: column;\n    display: flex;\n    border: 1px solid var(--color11);\n    border-radius: 20px;\n    justify-content: center;\n    align-items: center;\n\n}\n\n\n\n\n#renderChild3Left{\n    display: flex;\n    justify-content: flex-start;\n    gap: 5px;\n}\n\n#renderChild3Right{\n    display: flex;\n    justify-content: flex-end;\n    margin-left: auto;\n    gap: 20px;\n}\n\n#renderChild2 > h2{\n    text-align: start;\n    margin-top: 0px;\n    margin-bottom: 0px;\n    padding-bottom: 5px;\n}\n\n\n\n/* #renderChild1Right{\n    display: flex;\n    flex: 1 1 0;\n    justify-content: right;\n}\n#renderChild2{\n    flex: 1;\n    flex-direction: column;\n    justify-content: center;\n    gap: 10px;\n}\n\n#renderChild3{\n    flex: 1;\n    height: 20px;\n    justify-content: left;\n    align-items: center;\n} */\n\n\n.taskPriorityContainer{\n    height: 20px;\n    width: 50px;\n    padding: 0px 5px 0px 5px;\n    border: 1px solid var(--color2);\n    border-radius: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 1;\n    color: var(--color13);\n    font-weight: bold;\n    font-family: var(--font-family);\n}\n\n.taskProjectContainer{\n    height: 20px;\n    width: 50px;\n    padding: 0px 5px 0px 5px;\n    border: 1px solid var(--color2);\n    border-radius: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--color13);\n    font-weight: bold;\n    font-family: var(--font-family);\n}\n\n.taskTitle{\n    font-size: var(--taskTitle);\n    word-break: break-all;\n}\n\n.taskDueDate{\n    margin: 0px;\n    font-family: var(--font-family);\n    font-size: var(--options-size);\n}\n\n.taskDescription{\n    font-size: var(--taskDescription);\n    margin-top: 0px;\n    margin-bottom: 0px;\n    padding-bottom: 5px;\n    word-break: break-all;\n}\n\n/* Priority Buttons Active on each Task Container*/\n.taskPriority{\n    font-size: var(--taskPriority);\n    display: flex;\n    gap: 10px;\n    background-color: none;\n\n}\n\n.Normal-button-active{\n    border-color: var(--color16);\n    background-color: var(--color16);\n}\n\n.High-button-active{\n    border-color: var(--color15);\n    background-color: var(--color15);\n}\n\n.Low-button-active{\n    border-color: var(--color14);\n    background-color: var(--color14);\n}\n\n/*Project Buttons Active on each Task Container*/\n.Personal-button{\n    background-color: var(--color6);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.Home-button{\n    background-color: var(--color9);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.Work-button{\n    background-color: var(--color7);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.taskProject{\n    font-size: var(--taskPriority);\n    display: flex;\n    gap: 10px;\n}\n\n.Personal-button-active{\n    border-color: var(--color6);\n    background-color: var(--color6);\n}\n\n.Work-button-active{\n    border-color: var(--color7);\n    background-color: var(--color7);\n}\n\n.Home-button-active{\n    border-color: var(--color9);\n    background-color: var(--color9);\n}\n\n.project-active, .priority-active{\n    opacity: 1;\n}\n\n\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:[":root{\n    --color1: #7286D3;\n    --color2: #8EA7E9;\n    --color2rgba: rgba(183, 202, 251, 0.2);\n    --color3: #E5E0FF;\n    --color4: #FFF2F2;\n    --color5: #454545;\n    --color6: #FFB84C;\n    --color7: #F266AB;\n    --color8: #A459D1;\n    --color9: #3795BD;\n    --color10: #2F58CD;\n    --color11: #ffffff;;\n    --color12: #9e9ea7;\n    --color13: #2f2f2f;\n    --color14: #FFE162;\n    --color15: #FF6464;\n    --color16: #91C483;\n    --color17: #000000;\n    --font-color: #454545;\n    --font-family: :system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    --p-size: 14px;\n    --options-size: 12px;\n    --taskTitle: 20px;\n    --taskDescription: 14px;\n    --taskDueDate: 14px;\n    --taskPriority: 12px;\n}\n\nbody{\n    background-color: var(--colo47);\n}\n.middle-container{\n    display: grid;\n    grid-template-columns: 1fr 4fr;\n    grid-template-rows: 1fr;\n}\n\n#main-container{\n    /* width: 400px; */\n    grid-column: 2/3;\n    height: 100%;\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    flex-direction: column;\n    gap: 10px;\n    grid-auto-flow: column;\n}\n\n.main-column{\n    gap: 5px;\n    padding: 5px;\n    display: flex;\n    flex-direction: column;\n}\n#personal-tasks{\n    \n}\n\n\n\n.task-container-header{\n    padding: 2.5px;\n    border: 1px solid var(--color10);\n    border-radius: 5px;\n    display: flex;\n    flex: 0 1 auto;\n    justify-content: left;\n    align-items: center;\n}\n\n.task-container{\n    /* padding: 10px; */\n    border: 1px solid var(--color10);\n    /* border-radius: 5px; */\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n\n.personal-tasks-header{\n    background-color: var(--color9);\n}\n\n.work-tasks-header{\n    background-color: var(--color2);\n}\n\n.home-tasks-header{\n    background-color: var(--color14);\n\n}\n\n.reminder-tasks-header{\n    background-color: var(--color15);\n\n}\n\n\n.header{\n    height: 80px;\n    background-color: #8EA7E9;\n}\n\n.left-sidebar{\n    grid-column: 1/2;\n    grid-row: 1/2;\n    height: 100%;\n    border: 1px solid #454545;\n}\n\n.right-sidebar{\n    grid-column: 3/4;\n    border: 1px solid #454545;\n}\n\n.middle-container{\n    grid-column: 2/3;\n    height: 100vh;\n    border: 1px solid #454545;\n\n}\n\n\n#formContainer{\n    height: 400px;\n    width: 300px;\n    background-color: var(--color11);\n    justify-self: center;\n    align-self: center;\n    visibility: hidden;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.4s;\n    border: 0.2px solid var(--color5);\n    border-radius: 15px;\n    padding: 20px;\n    box-shadow: 10px 10px 10px rgba(69,69,69,0.2);\n}\n\n#NewTaskHeading{\n    margin: 0px auto 0px auto;\n\n}\n\n#newTaskForm{\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 10px;\n    gap: 20px;\n}\n\n.taskInput{\n    height: 30px;\n    width: 100%\n}\n\n\n\n.innerContainer{\n    width: 100%;\n}\n#taskDetailsContainer{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n/* #form-container:target { */\n    /* display: block; */\n    /* -webkit-animation: fadeIn 1s;\n    animation: fadeIn 1s; */\n    /* visibility: visible;\n    opacity: 1;\n\n} */\n\n/*Add animation (fade in the popup) */\n@keyframes fadeIn {\n    from {opacity: 0;}\n    to {opacity: 1;}\n}\n\n.taskInput{\n    display: block;\n}\n\n.labels{\n    display: block;\n}\n\n.newTask{\n    display: flex;\n    flex: 0 1 1;\n    flex-direction: column;\n    justify-content: flex-start;\n    padding: 10px;\n    background-color: var(--color13);\n    border: 1px solid var(--color12);\n    border-radius: 5px;\n    color: var(--color11);\n    box-sizing: border-box;\n    margin: 2.5px 5px 2.5px 5px;\n}\n\n.project-button, .priority-button{\n    width: 70px;\n    height: 20px;\n    padding: 2px;\n    display: flex;\n    margin: auto;\n    align-items: center;\n    justify-content: center;\n    font-family: var(--font-family);\n    font-size: var(--options-size);\n    border: 1px solid;\n    border-radius: 5px;\n    color: var(--color13);\n}\n\n\n\n.Normal-button{\n    background-color: var(--color16);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.High-button{\n    background-color: var(--color15);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.Low-button{\n    background-color: var(--color14);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n\n\n/* .task-item{\n    display: block;\n} */\n\n/* \n.renderChild{\n    display: flex;\n    padding: 2px 10px 2px 10px;\n    margin: 0px;\n}\n*/\n#renderChild1{\n    display: flex;\n    vertical-align: top;\n    flex: 1;\n    margin: 0px;\n    gap: space-between;\n}\n\n#renderChild2{\n    margin-top: 10px;\n    margin-bottom: 0px;\n    display: flex;\n    flex: 1;\n}\n\n#renderChild3{\n    display: flex;\n    flex: 1 1 1;\n    margin-top: 0px;\n    align-items: bottom;\n    color: var(--color12);\n}\n\n\n#renderChild1Left{\n    display: flex;\n    gap: 5px;\n    align-items: top;\n    justify-content: flex-start;\n    vertical-align: top;\n} \n\n#renderChild1Right{\n    display: flex;\n    margin-left: auto;\n    align-items: top;\n}\n\n.taskDueDateContainer{\n    background-color: var(--color5);\n    height: 20px;\n    width: 50px;\n    padding: 0px 5px 0px 5px;\n    flex-direction: column;\n    display: flex;\n    border: 1px solid var(--color11);\n    border-radius: 20px;\n    justify-content: center;\n    align-items: center;\n\n}\n\n\n\n\n#renderChild3Left{\n    display: flex;\n    justify-content: flex-start;\n    gap: 5px;\n}\n\n#renderChild3Right{\n    display: flex;\n    justify-content: flex-end;\n    margin-left: auto;\n    gap: 20px;\n}\n\n#renderChild2 > h2{\n    text-align: start;\n    margin-top: 0px;\n    margin-bottom: 0px;\n    padding-bottom: 5px;\n}\n\n\n\n/* #renderChild1Right{\n    display: flex;\n    flex: 1 1 0;\n    justify-content: right;\n}\n#renderChild2{\n    flex: 1;\n    flex-direction: column;\n    justify-content: center;\n    gap: 10px;\n}\n\n#renderChild3{\n    flex: 1;\n    height: 20px;\n    justify-content: left;\n    align-items: center;\n} */\n\n\n.taskPriorityContainer{\n    height: 20px;\n    width: 50px;\n    padding: 0px 5px 0px 5px;\n    border: 1px solid var(--color2);\n    border-radius: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 1;\n    color: var(--color13);\n    font-weight: bold;\n    font-family: var(--font-family);\n}\n\n.taskProjectContainer{\n    height: 20px;\n    width: 50px;\n    padding: 0px 5px 0px 5px;\n    border: 1px solid var(--color2);\n    border-radius: 20px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: var(--color13);\n    font-weight: bold;\n    font-family: var(--font-family);\n}\n\n.taskTitle{\n    font-size: var(--taskTitle);\n    word-break: break-all;\n}\n\n.taskDueDate{\n    margin: 0px;\n    font-family: var(--font-family);\n    font-size: var(--options-size);\n}\n\n.taskDescription{\n    font-size: var(--taskDescription);\n    margin-top: 0px;\n    margin-bottom: 0px;\n    padding-bottom: 5px;\n    word-break: break-all;\n}\n\n/* Priority Buttons Active on each Task Container*/\n.taskPriority{\n    font-size: var(--taskPriority);\n    display: flex;\n    gap: 10px;\n    background-color: none;\n\n}\n\n.Normal-button-active{\n    border-color: var(--color16);\n    background-color: var(--color16);\n}\n\n.High-button-active{\n    border-color: var(--color15);\n    background-color: var(--color15);\n}\n\n.Low-button-active{\n    border-color: var(--color14);\n    background-color: var(--color14);\n}\n\n/*Project Buttons Active on each Task Container*/\n.Personal-button{\n    background-color: var(--color6);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.Home-button{\n    background-color: var(--color9);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.Work-button{\n    background-color: var(--color7);\n    opacity: 0.3;\n    border-color: var(--color12);\n}\n\n.taskProject{\n    font-size: var(--taskPriority);\n    display: flex;\n    gap: 10px;\n}\n\n.Personal-button-active{\n    border-color: var(--color6);\n    background-color: var(--color6);\n}\n\n.Work-button-active{\n    border-color: var(--color7);\n    background-color: var(--color7);\n}\n\n.Home-button-active{\n    border-color: var(--color9);\n    background-color: var(--color9);\n}\n\n.project-active, .priority-active{\n    opacity: 1;\n}\n\n\n"],sourceRoot:""}]);const l=i},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},222:(n,t,e)=>{var r=e(907),o=e(542),a=e(478),i="localStorage"in e.g&&e.g.localStorage?e.g.localStorage:r;function l(n,t){return 1===arguments.length?s(n):c(n,t)}function s(n){const t=i.getItem(n);return o(t)}function c(n,t){try{return i.setItem(n,JSON.stringify(t)),!0}catch(n){return!1}}l.set=c,l.get=s,l.remove=function(n){return i.removeItem(n)},l.clear=function(){return i.clear()},l.backend=function(n){return n&&(i=n),i},l.on=a.on,l.off=a.off,n.exports=l},542:n=>{n.exports=function(n){const t=function(n){try{return JSON.parse(n)}catch(t){return n}}(n);return void 0===t?null:t}},907:n=>{var t={};n.exports={getItem:function(n){return n in t?t[n]:null},setItem:function(n,e){return t[n]=e,!0},removeItem:function(n){return!!(n in t)&&delete t[n]},clear:function(){return t={},!0}}},478:(n,t,e)=>{var r=e(542),o={};function a(n){n||(n=e.g.event);var t=o[n.key];t&&t.forEach((function(t){t(r(n.newValue),r(n.oldValue),n.url||n.uri)}))}n.exports={on:function(n,t){o[n]?o[n].push(t):o[n]=[t],e.g.addEventListener?e.g.addEventListener("storage",a,!1):e.g.attachEvent?e.g.attachEvent("onstorage",a):e.g.onstorage=a},off:function(n,t){var e=o[n];e.length>1?e.splice(e.indexOf(t),1):o[n]=[]}}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var a={},i=[],l=0;l<n.length;l++){var s=n[l],c=r.base?s[0]+r.base:s[0],d=a[c]||0,u="".concat(c," ").concat(d);a[c]=d+1;var A=e(u),f={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(f);else{var p=o(f,r);r.byIndex=l,t.splice(l,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var l=e(a[i]);t[l].references--}for(var s=r(n,o),c=0;c<a.length;c++){var d=e(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=s}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return n[r](a,a.exports,e),a.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),r=e(795),o=e.n(r),a=e(569),i=e.n(a),l=e(565),s=e.n(l),c=e(216),d=e.n(c),u=e(589),A=e.n(u),f=e(28),p={};p.styleTagTransform=A(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),t()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals;const m={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let g;const h=new Uint8Array(16);function C(){if(!g&&(g="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!g))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return g(h)}const v=[];for(let n=0;n<256;++n)v.push((n+256).toString(16).slice(1));const b=function(n,t,e){if(m.randomUUID&&!t&&!n)return m.randomUUID();const r=(n=n||{}).random||(n.rng||C)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){e=e||0;for(let n=0;n<16;++n)t[e+n]=r[n];return t}return function(n,t=0){return(v[n[t+0]]+v[n[t+1]]+v[n[t+2]]+v[n[t+3]]+"-"+v[n[t+4]]+v[n[t+5]]+"-"+v[n[t+6]]+v[n[t+7]]+"-"+v[n[t+8]]+v[n[t+9]]+"-"+v[n[t+10]]+v[n[t+11]]+v[n[t+12]]+v[n[t+13]]+v[n[t+14]]+v[n[t+15]]).toLowerCase()}(r)};function B(n){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},B(n)}function y(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function x(n){y(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"===B(n)&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function I(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function k(n){y(1,arguments);var t=x(n),e=t.getUTCDay(),r=(e<1?7:0)+e-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function w(n){y(1,arguments);var t=x(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var o=k(r),a=new Date(0);a.setUTCFullYear(e,0,4),a.setUTCHours(0,0,0,0);var i=k(a);return t.getTime()>=o.getTime()?e+1:t.getTime()>=i.getTime()?e:e-1}var T={};function D(){return T}function E(n,t){var e,r,o,a,i,l,s,c;y(1,arguments);var d=D(),u=I(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==e?e:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=x(n),f=A.getUTCDay(),p=(f<u?7:0)+f-u;return A.setUTCDate(A.getUTCDate()-p),A.setUTCHours(0,0,0,0),A}function S(n,t){var e,r,o,a,i,l,s,c;y(1,arguments);var d=x(n),u=d.getUTCFullYear(),A=D(),f=I(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:A.firstWeekContainsDate)&&void 0!==r?r:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(u+1,0,f),p.setUTCHours(0,0,0,0);var m=E(p,t),g=new Date(0);g.setUTCFullYear(u,0,f),g.setUTCHours(0,0,0,0);var h=E(g,t);return d.getTime()>=m.getTime()?u+1:d.getTime()>=h.getTime()?u:u-1}function j(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const P=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return j("yy"===t?r%100:r,t.length)},M=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):j(e+1,2)},U=function(n,t){return j(n.getUTCDate(),t.length)},N=function(n,t){return j(n.getUTCHours()%12||12,t.length)},Y=function(n,t){return j(n.getUTCHours(),t.length)},W=function(n,t){return j(n.getUTCMinutes(),t.length)},q=function(n,t){return j(n.getUTCSeconds(),t.length)},F=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,e-3)),t.length)};var L={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),o=r>0?r:1-r;return e.ordinalNumber(o,{unit:"year"})}return P(n,t)},Y:function(n,t,e,r){var o=S(n,r),a=o>0?o:1-o;return"YY"===t?j(a%100,2):"Yo"===t?e.ordinalNumber(a,{unit:"year"}):j(a,t.length)},R:function(n,t){return j(w(n),t.length)},u:function(n,t){return j(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return j(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return M(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var o=function(n,t){y(1,arguments);var e=x(n),r=E(e,t).getTime()-function(n,t){var e,r,o,a,i,l,s,c;y(1,arguments);var d=D(),u=I(null!==(e=null!==(r=null!==(o=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==e?e:1),A=S(n,t),f=new Date(0);return f.setUTCFullYear(A,0,u),f.setUTCHours(0,0,0,0),E(f,t)}(e,t).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===t?e.ordinalNumber(o,{unit:"week"}):j(o,t.length)},I:function(n,t,e){var r=function(n){y(1,arguments);var t=x(n),e=k(t).getTime()-function(n){y(1,arguments);var t=w(n),e=new Date(0);return e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0),k(e)}(t).getTime();return Math.round(e/6048e5)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):j(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):U(n,t)},D:function(n,t,e){var r=function(n){y(1,arguments);var t=x(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=e-t.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):j(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return j(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var o=n.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return j(a,t.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return j(o,t.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return N(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):Y(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):j(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):W(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):q(n,t)},S:function(n,t){return F(n,t)},X:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return z(o);case"XXXX":case"XX":return H(o);default:return H(o,":")}},x:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return z(o);case"xxxx":case"xx":return H(o);default:return H(o,":")}},O:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+O(o,":");default:return"GMT"+H(o,":")}},z:function(n,t,e,r){var o=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+O(o,":");default:return"GMT"+H(o,":")}},t:function(n,t,e,r){var o=r._originalDate||n;return j(Math.floor(o.getTime()/1e3),t.length)},T:function(n,t,e,r){return j((r._originalDate||n).getTime(),t.length)}};function O(n,t){var e=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),a=r%60;if(0===a)return e+String(o);var i=t||"";return e+String(o)+i+j(a,2)}function z(n,t){return n%60==0?(n>0?"-":"+")+j(Math.abs(n)/60,2):H(n,t)}function H(n,t){var e=t||"",r=n>0?"-":"+",o=Math.abs(n);return r+j(Math.floor(o/60),2)+e+j(o%60,2)}const R=L;var Z=function(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},G=function(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const Q={p:G,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return Z(n,t);switch(o){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",Z(o,t)).replace("{{time}}",G(a,t))}};var X=["D","DD"],J=["YY","YYYY"];function $(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var V={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function _(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth;return n.formats[e]||n.formats[n.defaultWidth]}}const K={date:_({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:_({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:_({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var nn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function tn(n){return function(t,e){var r;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=e&&e.width?String(e.width):o;r=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,l=null!=e&&e.width?String(e.width):n.defaultWidth;r=n.values[l]||n.values[i]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const en={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:tn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:tn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:tn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:tn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:tn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function rn(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],a=t.match(o);if(!a)return null;var i,l=a[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,t){for(var e=0;e<n.length;e++)if(n[e].test(l))return e}(s):function(n,t){for(var e in n)if(n.hasOwnProperty(e)&&n[e].test(l))return e}(s);return i=n.valueCallback?n.valueCallback(c):c,{value:i=e.valueCallback?e.valueCallback(i):i,rest:t.slice(l.length)}}}var on,an={ordinalNumber:(on={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(on.matchPattern);if(!e)return null;var r=e[0],o=n.match(on.parsePattern);if(!o)return null;var a=on.valueCallback?on.valueCallback(o[0]):o[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:n.slice(r.length)}}),era:rn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:rn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:rn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:rn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:rn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ln={code:"en-US",formatDistance:function(n,t,e){var r,o=V[n];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:K,formatRelative:function(n,t,e,r){return nn[n]},localize:en,match:an,options:{weekStartsOn:0,firstWeekContainsDate:1}};var sn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,cn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,dn=/^'([^]*?)'?$/,un=/''/g,An=/[a-zA-Z]/;function fn(n,t,e){var r,o,a,i,l,s,c,d,u,A,f,p,m,g,h,C,v,b;y(2,arguments);var k=String(t),w=D(),T=null!==(r=null!==(o=null==e?void 0:e.locale)&&void 0!==o?o:w.locale)&&void 0!==r?r:ln,E=I(null!==(a=null!==(i=null!==(l=null!==(s=null==e?void 0:e.firstWeekContainsDate)&&void 0!==s?s:null==e||null===(c=e.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==l?l:w.firstWeekContainsDate)&&void 0!==i?i:null===(u=w.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(E>=1&&E<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=I(null!==(f=null!==(p=null!==(m=null!==(g=null==e?void 0:e.weekStartsOn)&&void 0!==g?g:null==e||null===(h=e.locale)||void 0===h||null===(C=h.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==m?m:w.weekStartsOn)&&void 0!==p?p:null===(v=w.locale)||void 0===v||null===(b=v.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==f?f:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var j=x(n);if(!function(n){if(y(1,arguments),!function(n){return y(1,arguments),n instanceof Date||"object"===B(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var t=x(n);return!isNaN(Number(t))}(j))throw new RangeError("Invalid time value");var P=function(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}(j),M=function(n,t){return y(2,arguments),function(n,t){y(2,arguments);var e=x(n).getTime(),r=I(t);return new Date(e+r)}(n,-I(t))}(j,P),U={firstWeekContainsDate:E,weekStartsOn:S,locale:T,_originalDate:j};return k.match(cn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,Q[t])(n,T.formatLong):n})).join("").match(sn).map((function(r){if("''"===r)return"'";var o,a,i=r[0];if("'"===i)return(a=(o=r).match(dn))?a[1].replace(un,"'"):o;var l,s=R[i];if(s)return null!=e&&e.useAdditionalWeekYearTokens||(l=r,-1===J.indexOf(l))||$(r,t,String(n)),null!=e&&e.useAdditionalDayOfYearTokens||!function(n){return-1!==X.indexOf(n)}(r)||$(r,t,String(n)),s(M,r,T.localize,U);if(i.match(An))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}Math.pow(10,8);var pn=6e4,mn=36e5;var gn={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},hn=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Cn=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,vn=/^([+-])(\d{2})(?::?(\d{2}))?$/;function bn(n){return n?parseInt(n):1}function Bn(n){return n&&parseFloat(n.replace(",","."))||0}var yn=[31,null,31,30,31,30,31,31,30,31,30,31];function xn(n){return n%400==0||n%4==0&&n%100!=0}function In(n,t="#",e="#",r="",o,a,i){const l=document.createElement(n);return l.innerText=r,l.className=t,l.id=e,l.content=i,o&&o.appendChild(l),"a"===n&&a&&(l.href=a),"img"===n&&a&&(l.src=a),l}function kn(n,t){n.appendChild(t)}function wn(n,t,e,r){const o=In(n);for(let n in t)o.setAttribute(n,t[n]),"submit"===t[n]&&(o.value=e);return"taskPriority"===o.id&&["Normal","High","Low"].forEach((n=>{let t=In("div",`priority-button ${n}-button`);"Normal"==n&&t.classList.add("priority-active"),t.innerText=n,o.appendChild(t)})),"taskProject"===o.id&&["Personal","Work","Home"].forEach((n=>{let t=In("div",`project-button ${n}-button`);"Personal"==n&&t.classList.add("project-active"),t.innerText=n,o.appendChild(t)})),e&&(o.innerText=e),r.appendChild(o),o}function Tn(n){this.title=n.title,this.description=n.description,this.assignedProject=n.project,this.dueDate=n.dueDate,this.priority=n.priority,this.uniqueID=b()}function Dn(n,t){const e=In("div","newTask"),r=In("div","renderChild","renderChild1","",e),o=In("div","renderChild","renderChild2","",e),a=In("div","renderChild","renderChild3","",e),i=In("div","","renderChild1Left","",r),l=In("div","","renderChild1Right","",r),s=In("div","","renderChild3Left","",a),c=In("div","","renderChild3Right","",a);if(In("h2","taskTitle task-item","",`${n.title}`,o),n.description){const t=In("div","taskDescriptionContainer","","",s);In("p","taskDescription task-item","",`${n.description}`,t)}if(n.dueDate){let t=fn(function(n,t){var e;y(1,arguments);var r=I(null!==(e=null==t?void 0:t.additionalDigits)&&void 0!==e?e:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var o,a=function(n){var t,e={},r=n.split(gn.dateTimeDelimiter);if(r.length>2)return e;if(/:/.test(r[0])?t=r[0]:(e.date=r[0],t=r[1],gn.timeZoneDelimiter.test(e.date)&&(e.date=n.split(gn.timeZoneDelimiter)[0],t=n.substr(e.date.length,n.length))),t){var o=gn.timezone.exec(t);o?(e.time=t.replace(o[1],""),e.timezone=o[1]):e.time=t}return e}(n);if(a.date){var i=function(n,t){var e=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=n.match(e);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:n.slice((r[1]||r[2]).length)}}(a.date,r);o=function(n,t){if(null===t)return new Date(NaN);var e=n.match(hn);if(!e)return new Date(NaN);var r=!!e[4],o=bn(e[1]),a=bn(e[2])-1,i=bn(e[3]),l=bn(e[4]),s=bn(e[5])-1;if(r)return function(n,t,e){return t>=1&&t<=53&&e>=0&&e<=6}(0,l,s)?function(n,t,e){var r=new Date(0);r.setUTCFullYear(n,0,4);var o=7*(t-1)+e+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,l,s):new Date(NaN);var c=new Date(0);return function(n,t,e){return t>=0&&t<=11&&e>=1&&e<=(yn[t]||(xn(n)?29:28))}(t,a,i)&&function(n,t){return t>=1&&t<=(xn(n)?366:365)}(t,o)?(c.setUTCFullYear(t,a,Math.max(o,i)),c):new Date(NaN)}(i.restDateString,i.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var l,s=o.getTime(),c=0;if(a.time&&(c=function(n){var t=n.match(Cn);if(!t)return NaN;var e=Bn(t[1]),r=Bn(t[2]),o=Bn(t[3]);return function(n,t,e){return 24===n?0===t&&0===e:e>=0&&e<60&&t>=0&&t<60&&n>=0&&n<25}(e,r,o)?e*mn+r*pn+1e3*o:NaN}(a.time),isNaN(c)))return new Date(NaN);if(!a.timezone){var d=new Date(s+c),u=new Date(0);return u.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),u.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),u}return l=function(n){if("Z"===n)return 0;var t=n.match(vn);if(!t)return 0;var e="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(n,t){return t>=0&&t<=59}(0,o)?e*(r*mn+o*pn):NaN}(a.timezone),isNaN(l)?new Date(NaN):new Date(s+c+l)}(n.dueDate),"EEEE");const e=In("div","taskDueDateContainer","","",l);In("p","taskDueDate task-item","",`${t}`,e)}if(n.assignedProject){const t=In("div",`taskProjectContainer ${n.assignedProject}-button-active`,"","",i);In("p","taskProject task-item","",`${n.assignedProject}`,t),console.log(n.project)}if(n.priority){const t=In("div",`taskPriorityContainer ${n.priority}-button-active`,"","",i);In("p","taskPriority task-item","",`${n.priority}`,t),console.log(n.priority)}const d=In("img","newTaskIcon","complete-task-before","",c,"../src/img/complete-task-before.svg");d.addEventListener("click",(n=>{"complete-task-before"===d.id?(console.log("this works"),d.src="../src/img/complete-task-after.svg",d.removeAttribute("id"),d.setAttribute("id","complete-task-after")):(d.setAttribute("src","../src/img/complete-task-before.svg"),d.removeAttribute("id"),d.setAttribute("id","complete-task-before"))})),kn(t,e)}function En(){e(222).get("tasksArray").forEach((n=>{if("Personal"===n[1].assignedProject){let t=document.querySelector("#personal-tasks-container");Dn(n[1],t)}else if("Work"===n[1].assignedProject){let t=document.querySelector("#work-tasks-container");Dn(n[1],t)}else if("Home"===n[1].assignedProject){let t=document.querySelector("#home-tasks-container");Dn(n[1],t)}else if("Reminders"===n[1].assignedProject){let t=document.querySelector("#reminders-tasks-container");Dn(n[1],t)}}))}const Sn=document.querySelector(".header"),jn=In("button","newTask-button","","New Task");kn(document.querySelector(".main-column1"),In("div","task-container","work-tasks-container")),kn(document.querySelector(".main-column2"),In("div","task-container","personal-tasks-container")),kn(document.querySelector(".main-column3"),In("div","task-container","home-tasks-container")),kn(document.querySelector(".main-column4"),In("div","task-container","reminders-tasks-container")),Sn.appendChild(jn),function(){const n=document.querySelector("body"),t=In("div","formContainer","formContainer"),e=wn("form",{action:"",id:"newTaskForm"},"",t);kn(e,In("h2","heading2","NewTaskHeading","Create a new task"));const r=wn("div",{class:"innerContainer"},"",e);wn("label",{class:"taskLabel",for:"taskTitle"},"Title",r),wn("input",{class:"taskInput",type:"text",name:"taskTitle",placeholder:"Enter task...",id:"taskTitle",required:!0},"",r);const o=wn("div",{class:"innerContainer",id:"taskDetailsContainer"},"",e);wn("label",{class:"taskLabel",for:"taskDetails"},"Task Details",o);const a=wn("div",{class:"innerContainer"},"",o);wn("label",{class:"taskLabel",for:"taskDescription"},"Due Date",a),wn("input",{class:"taskInput",type:"date",value:"",name:"taskDueDate",id:"taskDueDate"},"",a);const i=wn("div",{class:"innerContainer",id:"projectContainer",value:""},"",o);wn("label",{class:"taskLabel",for:"taskProject"},"Project",i),wn("div",{class:"taskInput taskProject",name:"taskProject",id:"taskProject"},"",i);const l=wn("div",{class:"innerContainer",id:"priorityContainer",value:""},"",o);wn("label",{class:"taskLabel",for:"taskPriority"},"Priority",l),wn("div",{class:"taskInput taskPriority",name:"taskPriority",id:"taskPriority"},"",l);const s=wn("div",{class:"innerContainer"},"",o);wn("input",{class:"taskInput",type:"text",name:"taskDescription",placeholder:"Add description",id:"taskDescription",value:""},"",s),wn("input",{class:"taskInput",type:"submit",name:"taskSaveButton",id:"taskSaveButton"},"Create task",e),kn(t,e),kn(n,t)}(),jn.addEventListener("click",(()=>{const n=document.getElementById("formContainer");n.style.visibility="visible",n.style.opacity=1}));const Pn=In("button","editTask-button","","Edit Task");Sn.appendChild(Pn),Pn.addEventListener("click",(()=>{const n=document.getElementById("formContainer");document.getElementById("taskTitle").value="new title",n.style.visibility="visible",n.style.opacity=1})),document.getElementById("newTaskForm").addEventListener("submit",(n=>{const t=document.getElementById("newTaskForm"),e=document.getElementById("formContainer");if(t.checkValidity()){let n=new Tn(function(){const n={title:document.getElementById("taskTitle").value,project:document.getElementsByClassName("project-active")[0].innerText,dueDate:document.getElementById("taskDueDate").value,priority:document.getElementsByClassName("priority-active")[0].innerText,description:document.getElementById("taskDescription").value};return console.log(n),n}());console.log("this is working"),function(n){const t=JSON.parse(localStorage.getItem("tasksArray"));n.counter=t.length+1,t.push([n.counter,n]),console.log(t),localStorage.setItem("tasksArray",JSON.stringify(t))}(n),document.querySelector("#personal-task-container"),container.innerHTML="",document.querySelector("#home-task-container"),container.innerHTML="",document.querySelector("#work-task-container"),container.innerHTML="",document.querySelector("#reminders-task-container"),container.innerHTML="",En()}else t.reportValidity();n.preventDefault(),e.style.visibility="hidden",e.style.transition="all 0s",t.reset()}));const Mn=[...document.querySelectorAll("div.priority-button")];console.log(Mn),Mn.forEach((n=>{n.addEventListener("click",(n=>{Mn.forEach((n=>{n.classList.remove("priority-active")})),n.target.classList.add("priority-active")}))}));const Un=[...document.querySelectorAll("div.project-button")];console.log(Un),Un.forEach((n=>{n.addEventListener("click",(n=>{Un.forEach((n=>{n.classList.remove("project-active")})),n.target.classList.add("project-active")}))})),En()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,