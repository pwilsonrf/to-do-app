(()=>{"use strict";var n={28:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),a=e.n(o),i=e(645),r=e.n(i)()(a());r.push([n.id,":root{\n    --color1: #7286D3;\n    --color2: #8EA7E9;\n    --color3: #E5E0FF;\n    --color4: #FFF2F2;\n    --color5: #454545;\n    --font-color: #454545;\n    \n}\n\n#formContainer{\n    height: 500px;\n    width: 500px;\n    background-color: var(--color3);\n/* \n    position: absolute; */\n\n    justify-self: center;\n    align-self: center;\n    visibility: hidden;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.4s;\n\n    border: 0.2px solid var(--color5);\n    border-radius: 15px;\n    padding: 40px;\n\n    box-shadow: 10px 10px 10px rgba(69,69,69,0.2);\n\n    \n   \n    \n}\n\n#newTaskForm{\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n    gap: 30px;\n}\n\n.taskInput{\n    height: 30px;\n    width: 100%\n}\n\n#taskDescription{\n    height: 50px;\n    width: 100%\n}\n\n.innerContainer{\n    width: 100%;\n}\n#taskDetailsContainer{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n/* #form-container:target { */\n    /* display: block; */\n    /* -webkit-animation: fadeIn 1s;\n    animation: fadeIn 1s; */\n    /* visibility: visible;\n    opacity: 1;\n\n} */\n\n/*Add animation (fade in the popup) */\n@keyframes fadeIn {\n    from {opacity: 0;}\n    to {opacity: 1;}\n}\n\n.taskInput{\n    display: block;\n}\n\n.labels{\n    display: block;\n}\n\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;IACjB,qBAAqB;;AAEzB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,+BAA+B;AACnC;yBACyB;;IAErB,oBAAoB;IACpB,kBAAkB;IAClB,kBAAkB;IAClB,UAAU;IACV,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,SAAS;IACT,OAAO;IACP,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,oBAAoB;;IAEpB,iCAAiC;IACjC,mBAAmB;IACnB,aAAa;;IAEb,6CAA6C;;;;;AAKjD;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,YAAY;IACZ;AACJ;;AAEA;IACI,YAAY;IACZ;AACJ;;AAEA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA,6BAA6B;IACzB,oBAAoB;IACpB;2BACuB;IACvB;;;GAGD;;AAEH,qCAAqC;AACrC;IACI,MAAM,UAAU,CAAC;IACjB,IAAI,UAAU,CAAC;AACnB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,cAAc;AAClB",sourcesContent:[":root{\n    --color1: #7286D3;\n    --color2: #8EA7E9;\n    --color3: #E5E0FF;\n    --color4: #FFF2F2;\n    --color5: #454545;\n    --font-color: #454545;\n    \n}\n\n#formContainer{\n    height: 500px;\n    width: 500px;\n    background-color: var(--color3);\n/* \n    position: absolute; */\n\n    justify-self: center;\n    align-self: center;\n    visibility: hidden;\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    margin: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.4s;\n\n    border: 0.2px solid var(--color5);\n    border-radius: 15px;\n    padding: 40px;\n\n    box-shadow: 10px 10px 10px rgba(69,69,69,0.2);\n\n    \n   \n    \n}\n\n#newTaskForm{\n    height: 100%;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    padding: 40px;\n    gap: 30px;\n}\n\n.taskInput{\n    height: 30px;\n    width: 100%\n}\n\n#taskDescription{\n    height: 50px;\n    width: 100%\n}\n\n.innerContainer{\n    width: 100%;\n}\n#taskDetailsContainer{\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n/* #form-container:target { */\n    /* display: block; */\n    /* -webkit-animation: fadeIn 1s;\n    animation: fadeIn 1s; */\n    /* visibility: visible;\n    opacity: 1;\n\n} */\n\n/*Add animation (fade in the popup) */\n@keyframes fadeIn {\n    from {opacity: 0;}\n    to {opacity: 1;}\n}\n\n.taskInput{\n    display: block;\n}\n\n.labels{\n    display: block;\n}\n\n"],sourceRoot:""}]);const s=r},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(r[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);o&&r[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},r=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],A=i[l]||0,p="".concat(l," ").concat(A);i[l]=A+1;var d=e(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(u);else{var f=a(u,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:f,references:1})}r.push(p)}return r}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=o(n=n||[],a=a||{});return function(n){n=n||[];for(var r=0;r<i.length;r++){var s=e(i[r]);t[s].references--}for(var c=o(n,a),l=0;l<i.length;l++){var A=e(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=c}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,a&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(o){var a=t[o];if(void 0!==a)return a.exports;var i=t[o]={id:o,exports:{}};return n[o](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nc=void 0,(()=>{var n=e(379),t=e.n(n),o=e(795),a=e.n(o),i=e(569),r=e.n(i),s=e(565),c=e.n(s),l=e(216),A=e.n(l),p=e(589),d=e.n(p),u=e(28),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=r().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=A(),t()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const m={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let C;const y=new Uint8Array(16);function I(){if(!C&&(C="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!C))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return C(y)}const h=[];for(let n=0;n<256;++n)h.push((n+256).toString(16).slice(1));const v=function(n,t,e){if(m.randomUUID&&!t&&!n)return m.randomUUID();const o=(n=n||{}).random||(n.rng||I)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t){e=e||0;for(let n=0;n<16;++n)t[e+n]=o[n];return t}return function(n,t=0){return(h[n[t+0]]+h[n[t+1]]+h[n[t+2]]+h[n[t+3]]+"-"+h[n[t+4]]+h[n[t+5]]+"-"+h[n[t+6]]+h[n[t+7]]+"-"+h[n[t+8]]+h[n[t+9]]+"-"+h[n[t+10]]+h[n[t+11]]+h[n[t+12]]+h[n[t+13]]+h[n[t+14]]+h[n[t+15]]).toLowerCase()}(o)};function b(n,t="#",e="#",o="",a,i,r){const s=document.createElement(n);return s.innerText=o,s.className=t,s.id=e,s.content=r,a&&a.appendChild(s),"a"===n&&i&&(s.href=i),s}function B(n,t){n.appendChild(t)}function k(n,t,e,o){const a=b(n);for(let n in t)a.setAttribute(n,t[n]),"submit"===t[n]&&(a.value=e);return e&&(a.innerText=e),o.appendChild(a),"select"===n&&["Normal","High","Low"].forEach((n=>{let t=document.createElement("option");t.innerText=n,a.appendChild(t)})),a}function g(n){this.title=n.title,this.description=n.description,this.assignedProject=n.project,this.dueDate=n.dueDate,this.priority=n.priority,this.uniqueID=v()}const x=document.querySelector("#main-container"),E=b("button","newTask-button","","New Task");console.log(E),x.appendChild(E),function(){const n=document.querySelector("body"),t=b("div","formContainer","formContainer"),e=k("form",{action:"",onsubmit:"return false",id:"newTaskForm"},"",t);B(e,b("h2","heading2","NewTaskHeading","Create a new task"));const o=k("div",{class:"innerContainer"},"",e);k("label",{class:"taskLabel",for:"taskTitle"},"Title",o),k("input",{class:"taskInput",type:"text",name:"taskTitle",placeholder:"Enter task...",id:"taskTitle"},"",o),k("input",{class:"taskInput",type:"text",name:"taskProject",placeholder:"Project",id:"taskProject"},"",e);const a=k("div",{class:"innerContainer",id:"taskDetailsContainer"},"",e);k("label",{class:"taskLabel",for:"taskDetails"},"Task Details",a);const i=k("div",{class:"innerContainer"},"",a);k("label",{class:"taskLabel",for:"taskDescription"},"Due Date",i),k("input",{class:"taskInput",type:"date",name:"taskDueDate",id:"taskDueDate"},"",i);const r=k("div",{class:"innerContainer"},"",a);k("label",{class:"taskLabel",for:"taskPriority"},"Priority",r),k("select",{class:"taskInput",name:"taskDueDate",id:"taskPriority"},"",r);const s=k("div",{class:"innerContainer"},"",a);k("input",{class:"taskInput",type:"text",name:"taskDescription",placeholder:"Add description",id:"taskDescription"},"",s),k("input",{class:"taskInput",type:"submit",name:"taskSaveButton",id:"taskSaveButton"},"Create task",e),B(t,e),B(n,t)}(),E.addEventListener("click",(()=>{const n=document.getElementById("formContainer");n.style.visibility="visible",n.style.opacity=1})),document.querySelector("#taskSaveButton").addEventListener("click",(()=>{let n=function(){const n={title:document.getElementById("taskTitle").value,project:document.getElementById("taskProject").value,dueDate:document.getElementById("taskDueDate").value,priority:document.getElementById("taskPriority").value,description:document.getElementById("taskDescription").value};return console.log(n),n}();var t;t=new g(n),localStorage.setItem(t.uniqueID,JSON.stringify(t)),console.log(n)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,